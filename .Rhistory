peaksidx[[i]]
peaks$int[which(peaks$id == peaksidx[[i]])]
i
View(ft)
peaks$id == 55
peaks$int[which(peaks$id == 55)]
peaks$int[which(peaks$id == 135)]
peaks$int[which(peaks$id == 165)]
peaks$int[which(peaks$id == 225)]
peaks$int[which(peaks$id %in% peaksidx[[i]])]
peaks$int[which(peaks$id == peaksidx[[i]])]
peaks$int[which(peaks$id == 614)]
peaks$int[which(peaks$id == 500)]
peaks$int[which(peaks$id == 205)]
ids <- peaksidx[[i]]
for(j in ids) {
print(j)
}
intValues <- c()
ids <- peaksidx[[i]]
for(j in ids) {
print(j)
intValues <- c(intValues, peaks$int[which(peaks$id == j)])
}
print(intValues)
ft <- peaksCluster$featureDefinitions
peaksidx <- peaksCluster$peakIndex
for(i in 1:nrow(ft)) {
columnNames <- names(ft[i,which(ft[i,] > 0)])
intValues <- c()
ids <- peaksidx[[i]]
for(j in ids) {
print(j)
intValues <- c(intValues, peaks$int[which(peaks$id == j)])
}
print(intValues)
ft[i,columnNames[5:length(columnNames)]] <- intValues
}
View(ft)
testCluster <- ms2Clust(ms2specs[1:5000])
ms2Clust <- function(ms2spectra, error = 0.001, errorType = "abs") {
#some sanity check
#check if more than 1 spectrum is supplied
if(length(ms2spectra) < 2) {
stop("Minimum two spectra in Spectrum2 class required")
}
#check if all entries in list are of Spectrum2 class
if(!all(lapply(ms2spectra, function(x) {is(x, "Spectrum2")}))) {
stop("No all spectra of Spectrum2 class")
}
#just some tests for lapply
#lapply(specList, function(x) {return(x@polarity)})
#data preparation
peaks <- data.frame()
for(i in 1:length(ms2spectra)) {
if(length(ms2spectra[[i]]@mz) > 0) {
#add to data frame for grouping
peaks <- rbind.data.frame(peaks, cbind.data.frame(mz = ms2spectra[[i]]@mz,
int = ms2spectra[[i]]@intensity,
rt = 1,
sample = i))
}
}
peaks$id <- as.numeric(row.names(peaks))
#differentiate between ppm or abs error
if(errorType == "abs") {
#cluster spectra
peaksCluster <- xcms::do_groupPeaks_mzClust(as.matrix(peaks[c("mz", "rt", "sample")]),
sampleGroups = 1:length(ms2spectra),
absMz = error,
minFraction = 0.0000001,
minSamples = 1)
} else if(errorType == "ppm") {
#cluster spectra
peaksCluster <- xcms::do_groupPeaks_mzClust(as.matrix(peaks[c("mz", "rt", "sample")]),
sampleGroups = 1:length(ms2spectra),
ppm = error,
minFraction = 0.1,
minSamples = 1)
} else {
stop("Unknown error type!")
}
ft <- peaksCluster$featureDefinitions
peaksidx <- peaksCluster$peakIndex
#iterate over feature definitions
for(i in 1:nrow(ft)) {
columnNames <- names(ft[i,which(ft[i,] > 0)])
intValues <- c()
ids <- peaksidx[[i]]
for(j in ids) {
print(j)
intValues <- c(intValues, peaks$int[which(peaks$id == j)])
}
print(intValues)
ft[i,columnNames[5:length(columnNames)]] <- intValues
}
# #add id to column for later mapping
# peaks$id <- row.names(peaks)
#
# ids <- t(as.data.frame(peaksCluster[[2]]))
# rownames(ids) <- NULL
# colnames(ids) <- as.character(1:length(specList))
#
#
# peaksClusterTable <- cbind(peaksCluster[[1]][,1:7], ids)
#
# testTable <- merge(peaksClusterTable, peaks, by.x = "1", by.y = "id")
return(ft)
}
testCluster <- ms2Clust(ms2specs[1:5000])
i
intValues
ms2Clust <- function(ms2spectra, error = 0.001, errorType = "abs") {
#some sanity check
#check if more than 1 spectrum is supplied
if(length(ms2spectra) < 2) {
stop("Minimum two spectra in Spectrum2 class required")
}
#check if all entries in list are of Spectrum2 class
if(!all(lapply(ms2spectra, function(x) {is(x, "Spectrum2")}))) {
stop("No all spectra of Spectrum2 class")
}
#just some tests for lapply
#lapply(specList, function(x) {return(x@polarity)})
#data preparation
peaks <- data.frame()
for(i in 1:length(ms2spectra)) {
if(length(ms2spectra[[i]]@mz) > 0) {
#add to data frame for grouping
peaks <- rbind.data.frame(peaks, cbind.data.frame(mz = ms2spectra[[i]]@mz,
int = ms2spectra[[i]]@intensity,
rt = 1,
sample = i))
}
}
peaks$id <- as.numeric(row.names(peaks))
#differentiate between ppm or abs error
if(errorType == "abs") {
#cluster spectra
peaksCluster <- xcms::do_groupPeaks_mzClust(as.matrix(peaks[c("mz", "rt", "sample")]),
sampleGroups = 1:length(ms2spectra),
absMz = error,
minFraction = 0.0000001,
minSamples = 1)
} else if(errorType == "ppm") {
#cluster spectra
peaksCluster <- xcms::do_groupPeaks_mzClust(as.matrix(peaks[c("mz", "rt", "sample")]),
sampleGroups = 1:length(ms2spectra),
ppm = error,
minFraction = 0.1,
minSamples = 1)
} else {
stop("Unknown error type!")
}
ft <- peaksCluster$featureDefinitions
peaksidx <- peaksCluster$peakIndex
#iterate over feature definitions
for(i in 1:nrow(ft)) {
columnNames <- names(ft[i,which(ft[i,] > 0)])
intValues <- c()
ids <- peaksidx[[i]]
for(j in ids) {
print(j)
intValues <- c(intValues, peaks$int[which(peaks$id == j)])
}
print(intValues)
ft[i,columnNames[5:length(columnNames)]] <- intValues
}
#return the final data
return(ft)
}
library(stringr)
library(OrgMassSpecR)
library(xcms)
##############################################################################
# XCMS3 basic data processing
##############################################################################
## Use socket based parallel processing on Windows systems
if (.Platform$OS.type == "unix") {
register(bpstart(MulticoreParam(4)))
} else {
register(bpstart(SnowParam(4)))
}
#load data from test
mzMLfiles <- list.files("./data", pattern = ".mzML$", full.names = TRUE)
raw_data <- readMSData(mzMLfiles, mode = "onDisk", centroided = TRUE)
## Get the base peak chromatograms. This reads data from the files.
bpis <- chromatogram(raw_data, aggregationFun = "max")
plot(bpis)
## Defining the settings for the centWave peak detection.
cwp <- CentWaveParam(snthresh = 3, peakwidth = c(2,60), ppm = 10)
xod <- findChromPeaks(raw_data, param = cwp)
## Doing the obiwarp alignment using the default settings.
xod <- adjustRtime(xod, param = ObiwarpParam())
## Define the PeakDensityParam
pdp <- PeakDensityParam(sampleGroups = xod$sample_group, maxFeatures = 300, minFraction = 0.66)
xod <- groupChromPeaks(xod, param = pdp)
#fill missing peaks
xod <- fillChromPeaks(xod)
##############################################################################
# MS2 spectra extraction
##############################################################################
#extract all ms spectra
ms2specs <- spectra(filterMsLevel(xod, msLevel = 2))
testCluster <- ms2Clust(ms2specs[1:5000])
testCluster <- ms2Clust(ms2specs[1:500])
testCluster <- ms2Clust(ms2specs[1:50])
View(testCluster)
testCluster <- ms2Clust(ms2specs[1:500])
ms2Clust <- function(ms2spectra, error = 0.001, errorType = "abs") {
#some sanity check
#check if more than 1 spectrum is supplied
if(length(ms2spectra) < 2) {
stop("Minimum two spectra in Spectrum2 class required")
}
#check if all entries in list are of Spectrum2 class
if(!all(lapply(ms2spectra, function(x) {is(x, "Spectrum2")}))) {
stop("No all spectra of Spectrum2 class")
}
#just some tests for lapply
#lapply(specList, function(x) {return(x@polarity)})
#data preparation
peaks <- data.frame()
for(i in 1:length(ms2spectra)) {
if(length(ms2spectra[[i]]@mz) > 0) {
#add to data frame for grouping
peaks <- rbind.data.frame(peaks, cbind.data.frame(mz = ms2spectra[[i]]@mz,
int = ms2spectra[[i]]@intensity,
rt = 1,
sample = i))
}
}
peaks$id <- as.numeric(row.names(peaks))
#differentiate between ppm or abs error
if(errorType == "abs") {
#cluster spectra
peaksCluster <- xcms::do_groupPeaks_mzClust(as.matrix(peaks[c("mz", "rt", "sample")]),
sampleGroups = 1:length(ms2spectra),
absMz = error,
minFraction = 0.0000001,
minSamples = 1)
} else if(errorType == "ppm") {
#cluster spectra
peaksCluster <- xcms::do_groupPeaks_mzClust(as.matrix(peaks[c("mz", "rt", "sample")]),
sampleGroups = 1:length(ms2spectra),
ppm = error,
minFraction = 0.1,
minSamples = 1)
} else {
stop("Unknown error type!")
}
ft <- peaksCluster$featureDefinitions
peaksidx <- peaksCluster$peakIndex
#iterate over feature definitions
for(i in 1:nrow(ft)) {
columnNames <- names(ft[i,which(ft[i,] > 0)])
intValues <- c()
ids <- peaksidx[[i]]
for(j in ids) {
print(j)
intValues <- c(intValues, peaks$int[which(peaks$id == j)])
}
print(intValues)
print(ft[i,columnNames[5:length(columnNames)]])
ft[i,columnNames[5:length(columnNames)]] <- intValues
}
#return the final data
return(ft)
}
testCluster <- ms2Clust(ms2specs[1:500])
#function to cluster MS2 spectra together
ms2Clust <- function(ms2spectra, error = 0.001, errorType = "abs") {
#some sanity check
#check if more than 1 spectrum is supplied
if(length(ms2spectra) < 2) {
stop("Minimum two spectra in Spectrum2 class required")
}
#check if all entries in list are of Spectrum2 class
if(!all(lapply(ms2spectra, function(x) {is(x, "Spectrum2")}))) {
stop("No all spectra of Spectrum2 class")
}
#just some tests for lapply
#lapply(specList, function(x) {return(x@polarity)})
#data preparation
peaks <- data.frame()
for(i in 1:length(ms2spectra)) {
if(length(ms2spectra[[i]]@mz) > 0) {
#add to data frame for grouping
peaks <- rbind.data.frame(peaks, cbind.data.frame(mz = ms2spectra[[i]]@mz,
int = ms2spectra[[i]]@intensity,
rt = 1,
sample = i))
}
}
peaks$id <- as.numeric(row.names(peaks))
#differentiate between ppm or abs error
if(errorType == "abs") {
#cluster spectra
peaksCluster <- xcms::do_groupPeaks_mzClust(as.matrix(peaks[c("mz", "rt", "sample")]),
sampleGroups = 1:length(ms2spectra),
absMz = error,
minFraction = 0.0000001,
minSamples = 1)
} else if(errorType == "ppm") {
#cluster spectra
peaksCluster <- xcms::do_groupPeaks_mzClust(as.matrix(peaks[c("mz", "rt", "sample")]),
sampleGroups = 1:length(ms2spectra),
ppm = error,
minFraction = 0.1,
minSamples = 1)
} else {
stop("Unknown error type!")
}
ft <- peaksCluster$featureDefinitions
peaksidx <- peaksCluster$peakIndex
#iterate over feature definitions
for(i in 1:nrow(ft)) {
columnNames <- names(ft[i,which(ft[i,] > 0)])
intValues <- c()
ids <- peaksidx[[i]]
for(j in ids) {
print(j)
intValues <- c(intValues, peaks$int[which(peaks$id == j)])
}
print(length(intValues))
print(length(ft[i,columnNames[5:length(columnNames)]]))
ft[i,columnNames[5:length(columnNames)]] <- intValues
}
#return the final data
return(ft)
}
testCluster <- ms2Clust(ms2specs[1:500])
#function to cluster MS2 spectra together
ms2Clust <- function(ms2spectra, error = 0.001, errorType = "abs") {
#some sanity check
#check if more than 1 spectrum is supplied
if(length(ms2spectra) < 2) {
stop("Minimum two spectra in Spectrum2 class required")
}
#check if all entries in list are of Spectrum2 class
if(!all(lapply(ms2spectra, function(x) {is(x, "Spectrum2")}))) {
stop("No all spectra of Spectrum2 class")
}
#just some tests for lapply
#lapply(specList, function(x) {return(x@polarity)})
#data preparation
peaks <- data.frame()
for(i in 1:length(ms2spectra)) {
if(length(ms2spectra[[i]]@mz) > 0) {
#add to data frame for grouping
peaks <- rbind.data.frame(peaks, cbind.data.frame(mz = ms2spectra[[i]]@mz,
int = ms2spectra[[i]]@intensity,
rt = 1,
sample = i))
}
}
peaks$id <- as.numeric(row.names(peaks))
#differentiate between ppm or abs error
if(errorType == "abs") {
#cluster spectra
peaksCluster <- xcms::do_groupPeaks_mzClust(as.matrix(peaks[c("mz", "rt", "sample")]),
sampleGroups = 1:length(ms2spectra),
absMz = error,
minFraction = 0.0000001,
minSamples = 1)
} else if(errorType == "ppm") {
#cluster spectra
peaksCluster <- xcms::do_groupPeaks_mzClust(as.matrix(peaks[c("mz", "rt", "sample")]),
sampleGroups = 1:length(ms2spectra),
ppm = error,
minFraction = 0.1,
minSamples = 1)
} else {
stop("Unknown error type!")
}
ft <- peaksCluster$featureDefinitions
peaksidx <- peaksCluster$peakIndex
#iterate over feature definitions
for(i in 1:nrow(ft)) {
columnNames <- names(ft[i,which(ft[i,] > 0)])
intValues <- c()
ids <- peaksidx[[i]]
for(j in ids) {
intValues <- c(intValues, peaks$int[which(peaks$id == j)])
}
print(length(intValues))
print(length(ft[i,columnNames[5:length(columnNames)]]))
ft[i,columnNames[5:length(columnNames)]] <- intValues
}
#return the final data
return(ft)
}
testCluster <- ms2Clust(ms2specs[1:500])
system("C:\\Program Files (x86)\\ChemAxon\\MarvinSuite\\bin\\molconvert smiles E:\\ascrs\\ascr-1.cdx")
system("molconvert smiles E:\\ascrs\\ascr-1.cdx")
system("cmd.exe", input ="molconvert smiles E:\\ascrs\\ascr-1.cdx")
system("cmd.exe", input ="C:\\Program Files (x86)\\ChemAxon\\MarvinSuite\\bin\\molconvert smiles E:\\ascrs\\ascr-1.cdx")
system("cmd.exe", input ="C:\\Program\ Files\ (x86)\\ChemAxon\\MarvinSuite\\bin\\molconvert smiles E:\\ascrs\\ascr-1.cdx")
system("cmd.exe", input ="C:\\Program\\ Files\ (x86)\\ChemAxon\\MarvinSuite\\bin\\molconvert smiles E:\\ascrs\\ascr-1.cdx")
system("cmd.exe", input ="C:\\Program/ Files\ (x86)\\ChemAxon\\MarvinSuite\\bin\\molconvert smiles E:\\ascrs\\ascr-1.cdx")
system("cmd.exe", input ="'C:\\Program Files\ (x86)\\ChemAxon\\MarvinSuite\\bin\\molconvert' smiles E:\\ascrs\\ascr-1.cdx")
shell("C:\\Program Files\ (x86)\\ChemAxon\\MarvinSuite\\bin\\molconvert smiles E:\\ascrs\\ascr-1.cdx")
shell('C:\\Program Files\ (x86)\\ChemAxon\\MarvinSuite\\bin\\molconvert smiles E:\\ascrs\\ascr-1.cdx')
system("cmd.exe", input ='C:\\Program Files\ (x86)\\ChemAxon\\MarvinSuite\\bin\\molconvert smiles E:\\ascrs\\ascr-1.cdx')
shQuote("C:\\Program Files\ (x86)\\ChemAxon\\MarvinSuite\\bin\\molconvert smiles E:\\ascrs\\ascr-1.cdx")
system("cmd.exe", input =shQuote('C:\\Program Files\ (x86)\\ChemAxon\\MarvinSuite\\bin\\molconvert smiles E:\\ascrs\\ascr-1.cdx'))
system(shQuote('C:\\Program Files\ (x86)\\ChemAxon\\MarvinSuite\\bin\\molconvert smiles E:\\ascrs\\ascr-1.cdx'))
system(shQuote('C:\Program Files (x86)\ChemAxon\MarvinSuite\bin>molconvert smiles E:\ascrs\ascr-1.cdx'))
system(shQuote('C:\\Program Files (x86)\\ChemAxon\\MarvinSuite\\bin>molconvert smiles E:\\ascrs\\ascr-1.cdx'))
system(shQuote('C:\\Program Files (x86)\\ChemAxon\\MarvinSuite\\bin\\molconvert smiles E:\\ascrs\\ascr-1.cdx'))
system(shQuote('molconvert smiles E:\\ascrs\\ascr-1.cdx'))
system("cmd.exe", input = shQuote('molconvert smiles E:\\ascrs\\ascr-1.cdx'))
system("cmd.exe", input = shQuote('C:\\Program Files (x86)\\ChemAxon\\MarvinSuite\\bin\\molconvert smiles E:\\ascrs\\ascr-1.cdx'))
system(shQuote('C:\\Program Files (x86)\\ChemAxon\\MarvinSuite\\bin\\molconvert smiles E:\\ascrs\\ascr-1.cdx'))
system(shQuote("C:\\Program Files (x86)\\ChemAxon\\MarvinSuite\\bin\\molconvert smiles E:\\ascrs\\ascr-1.cdx"))
system(shQuote("C:\\Program Files (x86)\\ChemAxon\\MarvinSuite\\bin\\molconvert smiles E:\\ascrs\\ascr-1.cdx"), intern = TRUE)
system(shQuote("cmd.exe C:\\Program Files (x86)\\ChemAxon\\MarvinSuite\\bin\\molconvert smiles E:\\ascrs\\ascr-1.cdx"), intern = TRUE)
system(shQuote("cmd.exe C:\\Program Files (x86)\\ChemAxon\\MarvinSuite\\bin\\molconvert smiles E:\\ascrs\\ascr-1.cdx"))
system("cmd.exe C:\\Program Files (x86)\\ChemAxon\\MarvinSuite\\bin\\molconvert smiles E:\\ascrs\\ascr-1.cdx")
system("cmd.exe C:\\Program Files (x86)\\ChemAxon\\MarvinSuite\\bin\\molconvert smiles E:\\ascrs\\ascr-1.cdx", intern = TRUE)
system("cmd.exe C:\\Program Files (x86)\\ChemAxon\\MarvinSuite\\bin\\molconvert smiles E:\\ascrs\\ascr-1.cdx", intern = TRUE, show.output.on.console = TRUE)
system("cmd.exe C:\\Program Files (x86)\\ChemAxon\\MarvinSuite\\bin\\molconvert smiles E:\\ascrs\\ascr-1.cdx", show.output.on.console = TRUE)
shell("C:\\Program Files (x86)\\ChemAxon\\MarvinSuite\\bin\\molconvert smiles E:\\ascrs\\ascr-1.cdx", show.output.on.console = TRUE)
shell("C:\\Program Files (x86)\\ChemAxon\\MarvinSuite\\bin\\molconvert smiles E:\\ascrs\\ascr-1.cdx")
shell(shQuote("C:\\Program Files (x86)\\ChemAxon\\MarvinSuite\\bin\\molconvert smiles E:\\ascrs\\ascr-1.cdx"))
shell(shQuote("C:\\Program Files (x86)\\ChemAxon\\MarvinSuite\\bin\\molconvert smiles E:\\ascrs\\ascr-1.cdx"), intern = TRUE)
shQuote("C:\\Program Files (x86)\\ChemAxon\\MarvinSuite\\bin\\molconvert smiles E:\\ascrs\\ascr-1.cdx")
shell(shQuote(command), intern = TRUE)
command <- "C:\\Program Files (x86)\\ChemAxon\\MarvinSuite\\bin\\molconvert smiles E:\\ascrs\\ascr-1.cdx"
shell(shQuote(command), intern = TRUE)
shell(shQuote(command, type = "cmd"), intern = TRUE)
shell(command)
setwd("C:/Program Files (x86)/ChemAxon/MarvinSuite/bin")
system("molconvert")
system("molconvert E:\\ascrs\\ascr-1.cdx")
system("molconvert smiles E:\\ascrs\\ascr-1.cdx")
system("cxcalc formula exact mass logP CC")
system("cxcalc CC formula exact mass logP")
system("cxcalc CC formula")
smiles <- system("molconvert smiles E:\\ascrs\\ascr-1.cdx")
smiles <- system("molconvert smiles E:\\ascrs\\ascr-1.cdx", intern = T)
system(paste0("cxcalc", smiles, "formula"))
system(paste0("cxcalc ", smiles, " formula"))
system(paste0("cxcalc ", smiles, " formula exactMass"))
output <- system(paste0("cxcalc ", smiles, " formula exactMass"))
output <- system(paste0("cxcalc ", smiles, " formula exactMass"), intern = T)
output[[1]]
output[[2]]
library(stringr)
library(stringr)
str_split(output[[2]], "\t")
str_split(output[[2]], "\t")[[1]][2]
exactMass <- str_split(output[[2]], "\t")[[1]][3]
exactMass <- as.numeric(str_split(output[[2]], "\t")[[1]][3])
exactMass <- str_replace(str_split(output[[2]], "\t")[[1]][3]), ",", ".")
exactMass <- str_replace(str_split(output[[2]], "\t")[[1]][3]), ",", ".")
exactMass <- str_replace(str_split(output[[2]], "\t")[[1]][3]), "," , ".")
exactMass <- str_replace(str_split(output[[2]], "\t")[[1]][3], "," , ".")
exactMass <- as.numeric(str_replace(str_split(output[[2]], "\t")[[1]][3], "," , "."))
formula <- as.character(str_split(output[[2]], "\t")[[1]][2])
files <- list.files("E:\\ascrs\\", pattern = ".cdx")
files <- list.files("E:\\ascrs\\", pattern = ".cdx", full.names = TRUE)
for(file in files) {
smiles <- system(paste0("molconvert smiles " file), intern = T)
output <- system(paste0("cxcalc ", smiles, " formula exactMass"), intern = T)
formula <- str_split(output[[2]], "\t")[[1]][2]
exactMass <- as.numeric(str_replace(str_split(output[[2]], "\t")[[1]][3], "," , "."))
}
smiles <- system(paste0("molconvert smiles ", file), intern = T)
smiles <- system(paste0("molconvert smiles ", as.character(file)), intern = T)
for(file in files) {}
for(file in files) {
print(file)
}
paste0("molconvert smiles ", file)
smiles <- system(paste0("molconvert smiles ", file), intern = T)
for(file in files) {
smiles <- system(paste0("molconvert smiles ", file), intern = T)
output <- system(paste0("cxcalc ", smiles, " formula exactMass"), intern = T)
formula <- str_split(output[[2]], "\t")[[1]][2]
exactMass <- as.numeric(str_replace(str_split(output[[2]], "\t")[[1]][3], "," , "."))
}
#list files to convert
files <- list.files("E:\\ascrs\\", pattern = ".cdx", full.names = TRUE)
#dataframe for results
molecules <- data.frame()
for(file in files) {
name <- str_replace(basename(file), "-", "#")
smiles <- system(paste0("molconvert smiles ", file), intern = T)
output <- system(paste0("cxcalc ", smiles, " formula exactMass"), intern = T)
formula <- str_split(output[[2]], "\t")[[1]][2]
exactMass <- as.numeric(str_replace(str_split(output[[2]], "\t")[[1]][3], "," , "."))
molecules <- rbind.data.frame(molecules, cbind.data.frame(name = name,
formula = formula,
exactMass = exactMass))
}
View(molecules)
molecules <- data.frame()
for(file in files) {
name <- str_replace(basename(file), "-", "#")
name <- str_replace(name, ".cdx", "")
smiles <- system(paste0("molconvert smiles ", file), intern = T)
output <- system(paste0("cxcalc ", smiles, " formula exactMass"), intern = T)
formula <- str_split(output[[2]], "\t")[[1]][2]
exactMass <- as.numeric(str_replace(str_split(output[[2]], "\t")[[1]][3], "," , "."))
molecules <- rbind.data.frame(molecules, cbind.data.frame(name = name,
formula = formula,
exactMass = exactMass))
}
View(molecules)
write(molecules, "E:\\ascrs\\molecules.txt", sep = "\t", quote = FALSE, row.names = FALSE)
write.table(molecules, "E:\\ascrs\\molecules.txt", sep = "\t", quote = FALSE, row.names = FALSE)
