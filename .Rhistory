#return as json
req <- GET(MONASEARCH,
add_headers(JSONCONTENT),
query = list(query = paste0('compound.metaData=q=\'name==\"precursor m/z\" and value >= ', lower, ' and value <= ', upper, '\'')))
}
# } else if(returnType == "msp") {
#
#   #return as msp
#   req <- GET(MONASEARCH,
#              add_headers(MSPCONTENT),
#              query = list(query = paste0('compound.metaData=q=\'name=="molecular formula" and value=="', formula, '"\'')))
#
# }
return(content(req))
}
precursorResult <- searchByPrecursor2(205.097154, error = 0.01)
precursorResult <- searchByPrecursor2(205.097154, error = 0.1)
searchByPrecursor2 <- function(precursor, error = 0.01, returnType = "json") {
#get boundaries
lower <- precursor - error
upper <- precursor + error
#GET request
if(returnType == "json") {
print(paste0('metaData=q=\'name==\"precursor m/z\" and value >= ', lower, ' and value <= ', upper, '\''))
#return as json
req <- GET(MONASEARCH,
add_headers(JSONCONTENT),
query = list(query = paste0('metaData=q=\'name==\"precursor m/z\" and value >= ', lower, ' and value <= ', upper, '\'')))
}
return(content(req))
}
precursorResult <- searchByPrecursor2(205.097154, error = 0.1)
precursorResult <- searchByPrecursor2(205.097154, error = 0.01)
searchByPrecursor2 <- function(precursor, error = 0.01, returnType = "json") {
#get boundaries
lower <- precursor - error
upper <- precursor + error
#GET request
if(returnType == "json") {
print(paste0('metaData=q=\'name==\"precursor m/z\" and value >= ', lower, ' and value <= ', upper, '\' and (metaData=q=\'name==\"precursor type\" and value == \"[M+H]+\")'))
#return as json
req <- GET(MONASEARCH,
add_headers(JSONCONTENT),
query = list(query = paste0('metaData=q=\'name==\"precursor m/z\" and value >= ', lower, ' and value <= ', upper, '\' and (metaData=q=\'name==\"precursor type\" and value == \"[M+H]+\")')))
}
return(content(req))
}
precursorResult <- searchByPrecursor2(205.097154, error = 0.01)
searchByPrecursor2 <- function(precursor, error = 0.01, returnType = "json") {
#get boundaries
lower <- precursor - error
upper <- precursor + error
#GET request
if(returnType == "json") {
print(paste0('metaData=q=\'name==\"precursor m/z\" and value >= ', lower, ' and value <= ', upper, '\' and (metaData=q=\'name==\"precursor type\" and value == \"[M+H]+\")'))
#return as json
req <- GET(MONASEARCH,
add_headers(JSONCONTENT),
query = list(query = paste0('metaData=q=\'name==\"precursor m/z\" and value >= ', lower, ' and value <= ', upper, '\' and (metaData=q=\'name==\"precursor type\" and value == \"[M+H]+\"\')')))
}
return(content(req))
}
precursorResult <- searchByPrecursor2(205.097154, error = 0.01)
searchByPrecursor <- function(precursor, error = 0.01, precursorType = "[M+H]+",returnType = "json") {
#get boundaries
lower <- precursor - error
upper <- precursor + error
#GET request
if(returnType == "json") {
#return as json
req <- GET(MONASEARCH,
add_headers(JSONCONTENT),
query = list(query = paste0('metaData=q=\'name==\"precursor m/z\" and value >= ', lower, ' and value <= ', upper, '\' and (metaData=q=\'name==\"precursor type\" and value == \"', precursorType, '\"\')')))
}
return(content(req))
}
precursorResult <- searchByPrecursor(205.097154, error = 0.01)
precursorResult[[1]]
precursorResult[[1]]$spectrum
searchByFormula <- function(formula, returnType = "json") {
print(paste0('compound.metaData=q=\'name=="molecular formula" and value=="', formula, '"\''))
#GET request
if(returnType == "json") {
#return as json
req <- GET(MONASEARCH,
add_headers(JSONCONTENT),
query = list(query = paste0('compound.metaData=q=\'name=="molecular formula" and value=="', formula, '"\'')))
}
return(content(req))
}
searchByExactMass <- function(exactMass, error = 0.01, returnType = "json") {
#get boundaries
lower <- exactMass - error
upper <- exactMass + error
#GET request
if(returnType == "json") {
#return as json
req <- GET(MONASEARCH,
add_headers(JSONCONTENT),
query = list(query = paste0('compound.metaData=q=\'name==\"total exact mass\" and value >= ', lower, ' and value <= ', upper, '\'')))
}
return(content(req))
}
searchByPrecursor <- function(precursor, error = 0.01, precursorType = "[M+H]+",returnType = "json") {
#get boundaries
lower <- precursor - error
upper <- precursor + error
#GET request
if(returnType == "json") {
#return as json
req <- GET(MONASEARCH,
add_headers(JSONCONTENT),
query = list(query = paste0('metaData=q=\'name==\"precursor m/z\" and value >= ', lower, ' and value <= ', upper, '\' and (metaData=q=\'name==\"precursor type\" and value == \"', precursorType, '\"\')')))
}
return(content(req))
}
test <- searchByPrecursor(205.097154)
#load required libraries
library(RCurl)
library(httr)
#search by molecular formula
searchByFormula <- function(formula, returnType = "json") {
print(paste0('compound.metaData=q=\'name=="molecular formula" and value=="', formula, '"\''))
#GET request
if(returnType == "json") {
#return as json
req <- GET(MONASEARCH,
add_headers(JSONCONTENT),
query = list(query = paste0('compound.metaData=q=\'name=="molecular formula" and value=="', formula, '"\'')))
}
return(content(req))
}
#search by precursor
searchByExactMass <- function(exactMass, error = 0.01, returnType = "json") {
#get boundaries
lower <- exactMass - error
upper <- exactMass + error
#GET request
if(returnType == "json") {
#return as json
req <- GET(MONASEARCH,
add_headers(JSONCONTENT),
query = list(query = paste0('compound.metaData=q=\'name==\"total exact mass\" and value >= ', lower, ' and value <= ', upper, '\'')))
}
return(content(req))
}
#search by precursor and adduct type
searchByPrecursor <- function(precursor, error = 0.01, precursorType = "[M+H]+",returnType = "json") {
#get boundaries
lower <- precursor - error
upper <- precursor + error
#GET request
if(returnType == "json") {
#return as json
req <- GET(MONASEARCH,
add_headers(JSONCONTENT),
query = list(query = paste0('metaData=q=\'name==\"precursor m/z\" and value >= ', lower, ' and value <= ', upper, '\' and (metaData=q=\'name==\"precursor type\" and value == \"', precursorType, '\"\')')))
}
return(content(req))
}
MONASEARCH <- "http://mona.fiehnlab.ucdavis.edu/rest/spectra/search"
JSONCONTENT <- '"Content-Type" = "application/json"'
MSPCONTENT <- '"Accept: text/msp'
test <- searchByPrecursor(205.097154)
test[[1]]$spectrum
install.packages("OrgMassSpecR")
library(stringr)
str_split(test[[1]]$spectrum)
str_split(test[[1]]$spectrum, " ")
spectrum <- str_split(test[[1]]$spectrum, " ")
spectrum <- str_split(test[[1]]$spectrum, " ")[[1]]
spectrum2 <- str_spit(spectrum, ":")
spectrum2 <- str_split(spectrum, ":")
spectrum2 <- as.data.frame(str_split(spectrum, ":"))
View(spectrum2)
spectrum2 <- as.data.frame(t(str_split(spectrum, ":")))
View(spectrum2)
spectrum <- str_split(test[[1]]$spectrum, " ")[[1]]
View(spectrum2)
split(spectrum, ":")
str_split(spectrum, ":")
unlist(str_split(spectrum, ":"))
spectrum <- as.data.frame(str_split(test[[1]]$spectrum, " ")[[1]])
View(spectrum)
str_split_fixed(spectrum, ":", 2)
library(dplyr)
install.packages("dplyr")
install.packages("tidyr")
library(dplyr)
library(tidyr)
before <- data.frame(
attr = c(1, 30 ,4 ,6 ),
type = c('foo_and_bar', 'foo_and_bar_2')
)
before %>%
separate(type, c("foo", "bar"), "_and_")
before <- data.frame(
attr = c(1, 30 ,4 ,6 ),
type = c('foo_and_bar', 'foo_and_bar_2')
)
before %>%
separate(type, c("foo", "bar"), "_and_")
View(before)
before2 <- before %>%
separate(type, c("foo", "bar"), "_and_")
spectrum <- as.data.frame(spectrum = str_split(test[[1]]$spectrum, " ")[[1]])
spectrum <- spectrum %>% separate(spectrum, ":")
spectrum <- spectrum %>% separate(spectrum[1], ":")
spectrum <- spectrum %>% separate(spectrum[,1], ":")
spectrum <- spectrum %>% separate(spectrum[1,], ":")
spectrum <- as.data.frame(str_split(test[[1]]$spectrum, " ")[[1]])
out <- strsplit(as.numeric(spectrum), ":")
out <- strsplit(spectrum, ":")
spectrum <- as.data.frame(str_split(test[[1]]$spectrum, " ")[[1]])
out <- strsplit(spectrum, ":")
out <- strsplit(as.character(spectrum), ":")
spectrum <- as.data.frame(str_split(test[[1]]$spectrum, " ")[[1]])
str_split(spectrum, ".")
str_split(spectrum, ":")
spectrum <- as.data.frame(str_split(test[[1]]$spectrum, " ")[[1]])
View(spectrum)
spectrum <- str_split(test[[1]]$spectrum, " ")[[1]]
str_split(spectrum, ":")
spectrum <- str_split(test[[1]]$spectrum, " ")[[1]]
str_split(spectrum, ":")
unlist.(str_split(spectrum, ":"))
unlist(str_split(spectrum, ":"))
str_split(spectrum, ":")[[1]]
str_split(spectrum, ":")[[1]][2]
as.data.frame(matrix(unlist(str_split(spectrum, ":"))), nrow=length(unlist(str_split(spectrum, ":"))))
as.data.frame(matrix(unlist(str_split(spectrum, ":"))), nrow=length(unlist(str_split(spectrum, ":")[1])))
as.data.frame(matrix(unlist(str_split(spectrum, ":"))), nrow=length(unlist(str_split(spectrum, ":")[[1]])))
as.data.frame(matrix(unlist(str_split(spectrum, ":"))), nrow=length(2))
spectrum2 <- str_split(spectrum, ":")[[1]][2]
spectrum2 <- str_split(spectrum, ":")
df <- as.data.frame(t(as.data.frame(spectrum2)))
View(df)
rownames(df) <- NULL
View(df)
spectrum2 <-
df <- as.data.frame(t(as.data.frame(str_split(str_split(test[[1]]$spectrum, " ")[[1]], ":"))))
View(df)
rownames(df) <- NULL
library(OrgMassSpecR)
SpectrumSimilarity(df, df)
test <- SpectrumSimilarity(df, df)
df <- as.numeric(df)
df$V1 <- as.numeric(df$V1)
df$V2 <- as.numeric(df$V2)
test <- SpectrumSimilarity(df, df)
View(df)
spectrum2 <-
df <- as.data.frame(t(as.data.frame(str_split(str_split(test[[1]]$spectrum, " ")[[1]], ":"))))
df$V1 <- as.numeric(as.character(df$V1))
df$V2 <- as.numeric(as.character(df$V2))
test <- SpectrumSimilarity(df, df)
View(df)
spectrum2 <-
df <- as.data.frame(t(as.data.frame(str_split(str_split(test[[1]]$spectrum, " ")[[1]], ":"))))
rownames(df) <- NULL
df$V1 <- as.numeric(as.character(df$V1))
df$V2 <- as.numeric(as.character(df$V2))
test <- SpectrumSimilarity(df, df)
out
library(strinr)
library(OrgMassSpecR)
test <- searchByPrecursor(205.097154)
spectrum <- str_split(test[[1]]$spectrum, " ")[[1]]
df <- as.data.frame(t(as.data.frame(str_split(str_split(test[[1]]$spectrum, " ")[[1]], ":"))))
rownames(df) <- NULL
df$V1 <- as.numeric(as.character(df$V1))
df$V2 <- as.numeric(as.character(df$V2))
test <- SpectrumSimilarity(df, df)
#' This function reconstructs a Ms2 spectrum for all fragments with a correlation value bigger than a set cut-off
#'
#' @param precursor putative precursor peak
#' @param ms2dfCor corrected MS2 EICs
#' @param corValues calculated pearson correlations
#' @param CorCutOff cut-off for pearson correlation, default = 0.9
#'
#' @return returns a data frame containing the reconstructed MS2 spectrum
searchByFormula <- function(formula, returnType = "json") {
print(paste0('compound.metaData=q=\'name=="molecular formula" and value=="', formula, '"\''))
#GET request
if(returnType == "json") {
#return as json
req <- httr::GET(MONASEARCH,
add_headers(JSONCONTENT),
query = list(query = paste0('compound.metaData=q=\'name=="molecular formula" and value=="', formula, '"\'')))
}
return(httr::content(req))
}
#' This function reconstructs a Ms2 spectrum for all fragments with a correlation value bigger than a set cut-off
#'
#' @param precursor putative precursor peak
#' @param ms2dfCor corrected MS2 EICs
#' @param corValues calculated pearson correlations
#' @param CorCutOff cut-off for pearson correlation, default = 0.9
#'
#' @return returns a data frame containing the reconstructed MS2 spectrum
searchByExactMass <- function(exactMass, error = 0.01, returnType = "json") {
#get boundaries
lower <- exactMass - error
upper <- exactMass + error
#GET request
if(returnType == "json") {
#return as json
req <- httr::GET(MONASEARCH,
add_headers(JSONCONTENT),
query = list(query = paste0('compound.metaData=q=\'name==\"total exact mass\" and value >= ', lower, ' and value <= ', upper, '\'')))
}
return(httr::content(req))
}
#' This function reconstructs a Ms2 spectrum for all fragments with a correlation value bigger than a set cut-off
#'
#' @param precursor putative precursor peak
#' @param ms2dfCor corrected MS2 EICs
#' @param corValues calculated pearson correlations
#' @param CorCutOff cut-off for pearson correlation, default = 0.9
#'
#' @return returns a data frame containing the reconstructed MS2 spectrum
#search by precursor and adduct type
searchByPrecursor <- function(precursor, error = 0.01, precursorType = "[M+H]+",returnType = "json") {
#get boundaries
lower <- precursor - error
upper <- precursor + error
#GET request
if(returnType == "json") {
#return as json
req <- httr::GET(MONASEARCH,
add_headers(JSONCONTENT),
query = list(query = paste0('metaData=q=\'name==\"precursor m/z\" and value >= ', lower, ' and value <= ', upper, '\' and (metaData=q=\'name==\"precursor type\" and value == \"', precursorType, '\"\')')))
}
return(httr::content(req))
}
test <- searchByPrecursor(205.097154)
#' This function reconstructs a Ms2 spectrum for all fragments with a correlation value bigger than a set cut-off
#'
#' @param precursor putative precursor peak
#' @param ms2dfCor corrected MS2 EICs
#' @param corValues calculated pearson correlations
#' @param CorCutOff cut-off for pearson correlation, default = 0.9
#'
#' @return returns a data frame containing the reconstructed MS2 spectrum
searchByFormula <- function(formula, returnType = "json") {
print(paste0('compound.metaData=q=\'name=="molecular formula" and value=="', formula, '"\''))
#GET request
if(returnType == "json") {
#return as json
req <- httr::GET(MONASEARCH,
httr::add_headers(JSONCONTENT),
query = list(query = paste0('compound.metaData=q=\'name=="molecular formula" and value=="', formula, '"\'')))
}
return(httr::content(req))
}
#' This function reconstructs a Ms2 spectrum for all fragments with a correlation value bigger than a set cut-off
#'
#' @param precursor putative precursor peak
#' @param ms2dfCor corrected MS2 EICs
#' @param corValues calculated pearson correlations
#' @param CorCutOff cut-off for pearson correlation, default = 0.9
#'
#' @return returns a data frame containing the reconstructed MS2 spectrum
searchByExactMass <- function(exactMass, error = 0.01, returnType = "json") {
#get boundaries
lower <- exactMass - error
upper <- exactMass + error
#GET request
if(returnType == "json") {
#return as json
req <- httr::GET(MONASEARCH,
httr::add_headers(JSONCONTENT),
query = list(query = paste0('compound.metaData=q=\'name==\"total exact mass\" and value >= ', lower, ' and value <= ', upper, '\'')))
}
return(httr::content(req))
}
#' This function reconstructs a Ms2 spectrum for all fragments with a correlation value bigger than a set cut-off
#'
#' @param precursor putative precursor peak
#' @param ms2dfCor corrected MS2 EICs
#' @param corValues calculated pearson correlations
#' @param CorCutOff cut-off for pearson correlation, default = 0.9
#'
#' @return returns a data frame containing the reconstructed MS2 spectrum
#search by precursor and adduct type
searchByPrecursor <- function(precursor, error = 0.01, precursorType = "[M+H]+",returnType = "json") {
#get boundaries
lower <- precursor - error
upper <- precursor + error
#GET request
if(returnType == "json") {
#return as json
req <- httr::GET(MONASEARCH,
httr::add_headers(JSONCONTENT),
query = list(query = paste0('metaData=q=\'name==\"precursor m/z\" and value >= ', lower, ' and value <= ', upper, '\' and (metaData=q=\'name==\"precursor type\" and value == \"', precursorType, '\"\')')))
}
return(httr::content(req))
}
test <- searchByPrecursor(205.097154)
df <- as.data.frame(t(as.data.frame(str_split(str_split(test[[1]]$spectrum, " ")[[1]], ":"))))
rownames(df) <- NULL
df$V1 <- as.numeric(as.character(df$V1))
df$V2 <- as.numeric(as.character(df$V2))
test <- SpectrumSimilarity(df, df)
new("Spectrum2")
xcms::new("Spectrum2")
req <- httr::GET(MONASEARCH,
httr::add_headers(JSONCONTENT),
query = list(query = paste0('compound.metaData=q=\'name=="molecular formula" and value=="', formula, '"\'')))
searchByFormula <- function(formula, returnType = "json") {
print(paste0('compound.metaData=q=\'name=="molecular formula" and value=="', formula, '"\''))
#GET request
if(returnType == "json") {
#perform GET request
req <- httr::GET(MONASEARCH,
httr::add_headers(JSONCONTENT),
query = list(query = paste0('compound.metaData=q=\'name=="molecular formula" and value=="', formula, '"\'')))
#return JSON results
return(httr::content(req))
} else if(returnType == "mgf") {
#perform GET request
req <- httr::GET(MONASEARCH,
httr::add_headers(MSPCONTENT),
query = list(query = paste0('compound.metaData=q=\'name=="molecular formula" and value=="', formula, '"\'')))
}
}
searchByFormula("C6H12O6", returnType = "mgf")
test <- searchByFormula("C6H12O6", returnType = "mgf")
test[1]
test[[1]]
content(test)
httr::content(test)
searchByFormula <- function(formula, returnType = "json") {
print(paste0('compound.metaData=q=\'name=="molecular formula" and value=="', formula, '"\''))
#GET request
if(returnType == "json") {
#perform GET request
req <- httr::GET(MONASEARCH,
httr::add_headers(JSONCONTENT),
query = list(query = paste0('compound.metaData=q=\'name=="molecular formula" and value=="', formula, '"\'')))
#return JSON results
return(httr::content(req))
} else if(returnType == "mgf") {
#perform GET request
req <- httr::GET(MONASEARCH,
httr::add_headers(MSPCONTENT),
query = list(query = paste0('compound.metaData=q=\'name=="molecular formula" and value=="', formula, '"\' and(format=q=\'msp\')')))
#return MGF results
return(httr::content(req))
}
}
test <- searchByFormula("C6H12O6", returnType = "mgf")
searchByFormula <- function(formula, returnType = "json") {
print(paste0('compound.metaData=q=\'name=="molecular formula" and value=="', formula, '"\''))
#GET request
if(returnType == "json") {
#perform GET request
req <- httr::GET(MONASEARCH,
httr::add_headers(JSONCONTENT),
query = list(query = paste0('compound.metaData=q=\'name=="molecular formula" and value=="', formula, '"\'')))
#return JSON results
return(httr::content(req))
} else if(returnType == "mgf") {
#perform GET request
req <- httr::GET(MONASEARCH,
httr::add_headers(MSPCONTENT),
query = list(query = paste0('compound.metaData=q=\'name=="molecular formula" and value=="', formula, '"\' and(format=\'msp\')')))
#return MGF results
return(httr::content(req))
}
}
test <- searchByFormula("C6H12O6", returnType = "mgf")
searchByFormula <- function(formula, returnType = "json") {
print(paste0('compound.metaData=q=\'name=="molecular formula" and value=="', formula, '"\''))
#GET request
if(returnType == "json") {
#perform GET request
req <- httr::GET(MONASEARCH,
httr::add_headers(JSONCONTENT),
query = list(query = paste0('compound.metaData=q=\'name=="molecular formula" and value=="', formula, '"\'')))
#return JSON results
return(httr::content(req))
} else if(returnType == "mgf") {
#perform GET request
req <- httr::GET(MONASEARCH,
httr::add_headers(MSPCONTENT),
query = list(query = paste0('compound.metaData=q=\'name=="molecular formula" and value=="', formula, '"\' and (format=\'msp\')')))
#return MGF results
return(httr::content(req))
}
}
test <- searchByFormula("C6H12O6", returnType = "mgf")
searchByFormula <- function(formula, returnType = "json") {
print(paste0('compound.metaData=q=\'name=="molecular formula" and value=="', formula, '"\''))
#GET request
if(returnType == "json") {
#perform GET request
req <- httr::GET(MONASEARCH,
httr::add_headers(JSONCONTENT),
query = list(query = paste0('compound.metaData=q=\'name=="molecular formula" and value=="', formula, '"\'')))
#return JSON results
return(httr::content(req))
} else if(returnType == "mgf") {
#perform GET request
req <- httr::GET(MONASEARCH,
httr::add_headers(MSPCONTENT),
query = list(query = paste0('compound.metaData=q=\'name=="molecular formula" and value=="', formula, '"\' and (format==\'msp\')')))
#return MGF results
return(httr::content(req))
}
}
test <- searchByFormula("C6H12O6", returnType = "mgf")
